import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import csv
import os
import threading
import requests
import undetected_chromedriver as uc
from selenium.webdriver.chrome.options import Options
from fake_useragent import UserAgent
import sqlite3
import json
import time
import random
from datetime import datetime
import sys
import psutil
from ttkthemes import ThemedTk
import customtkinter as ctk

DB_PATH = 'browser_sessions4.db'
LOGIN_URL = "https://accounts.google.com/signup"

current_driver = None
profiles_list = []
current_index = -1

class TextLogger:
    def __init__(self, textbox):
        self.textbox = textbox

    def write(self, msg):
        self.textbox.insert(tk.END, msg)
        self.textbox.see(tk.END)
        sys.__stdout__.write(msg)

    def flush(self):
        pass

def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS sessions (
            profile TEXT PRIMARY KEY,
            user_agent TEXT,
            cookies TEXT
        )''')
        c.execute("PRAGMA table_info(sessions)")
        columns = [col[1] for col in c.fetchall()]
        if 'updated_at' not in columns:
            c.execute("ALTER TABLE sessions ADD COLUMN updated_at TEXT")
        conn.commit()

def save_session(profile, user_agent, cookies):
    try:
        with sqlite3.connect(DB_PATH, timeout=10) as conn:
            c = conn.cursor()
            now = datetime.utcnow().isoformat()
            c.execute('''INSERT OR REPLACE INTO sessions 
                         (profile, user_agent, cookies, updated_at)
                         VALUES (?, ?, ?, ?)''',
                      (profile, user_agent, json.dumps(cookies), now))
            conn.commit()
    except Exception as e:
        print(f"‚ùå DB Save Error: {e}")

def load_session(profile):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('SELECT user_agent, cookies FROM sessions WHERE profile = ?', (profile,))
        result = c.fetchone()
        return result if result else (None, None)

def verify_api(api_user_id, api_key_id):
    try:
        api_link = f"https://inboxinnovations.org?menuname=seeding&userid={api_user_id}&keyid={api_key_id}"
        response = requests.get(api_link)
        return response.text.strip() == "1"
    except Exception as e:
        print(f"‚ùå API verification failed: {e}")
        return False

def kill_chrome():
    for proc in psutil.process_iter():
        try:
            if proc.name().lower() in ["chrome.exe", "chromedriver.exe"]:
                proc.kill()
        except:
            pass

def launch_browser_return_driver(profile_id, proxy=None):
    print(f"üü¢ Launching browser for profile: {profile_id}")
    user_data_dir = f"C:/temp/{profile_id}"
    stored_user_agent, stored_cookies = load_session(profile_id)

    if stored_user_agent:
        user_agent = stored_user_agent
    else:
        try:
            ua = UserAgent()
            for _ in range(10):
                candidate = ua.chrome
                if all(x not in candidate.lower() for x in ['mobile', 'android', 'iphone', 'ipad']):
                    user_agent = candidate
                    break
            else:
                user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
        except Exception as e:
            print(f"‚ö†Ô∏è Error loading fake_useragent: {e}")
            user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"

    options = uc.ChromeOptions()
    options.add_argument(f"--user-agent={user_agent}")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--disable-infobars")
    options.add_argument("--disable-extensions")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument(f"--user-data-dir={user_data_dir}")

    if proxy:
        options.add_argument(f"--proxy-server=http://{proxy}")
        print(f"üåê Using Proxy: {proxy}")
    else:
        print("üö´ No proxy set.")

    custom_driver_path = r"c\chromedriver.exe"
    driver = uc.Chrome(options=options, driver_executable_path=custom_driver_path)

    driver.execute_cdp_cmd('Network.setUserAgentOverride', {
        "userAgent": user_agent,
        "acceptLanguage": "en-US,en;q=0.9",
        "platform": "Win32"
    })
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

    vendor_renderer_pairs = [
        ('Intel Inc.', 'Intel Iris Xe Graphics'),
        ('Intel Inc.', 'Intel UHD Graphics 630'),
        ('Intel Inc.', 'Intel HD Graphics 520'),
        ('Intel Inc.', 'Intel Iris Plus Graphics 655'),
        ('Intel Inc.', 'Intel UHD Graphics 620'),

        ('NVIDIA Corporation', 'NVIDIA GeForce GTX 1050'),
        ('NVIDIA Corporation', 'NVIDIA GeForce GTX 1660 Ti'),
        ('NVIDIA Corporation', 'NVIDIA GeForce RTX 2060'),
        ('NVIDIA Corporation', 'NVIDIA GeForce RTX 3060'),
        ('NVIDIA Corporation', 'NVIDIA GeForce RTX 3080'),
        ('NVIDIA Corporation', 'NVIDIA GeForce MX250'),
        ('NVIDIA Corporation', 'NVIDIA GeForce GT 1030'),
        ('NVIDIA Corporation', 'NVIDIA Quadro P2000'),
        ('NVIDIA Corporation', 'NVIDIA RTX A2000'),

        ('AMD', 'AMD Radeon RX 580'),
        ('AMD', 'AMD Radeon RX 5700 XT'),
        ('AMD', 'AMD Radeon RX 6600 XT'),
        ('AMD', 'AMD Radeon Pro 5500M'),
        ('AMD', 'AMD Radeon Vega 8'),
        ('AMD', 'AMD Radeon R9 M370X'),

        ('Apple Inc.', 'Apple M1'),
        ('Apple Inc.', 'Apple M2'),
        ('Apple Inc.', 'Apple M1 Pro'),
        ('Apple Inc.', 'Apple M1 Max'),
        ('Apple Inc.', 'Apple M2 Max'),
    ]

    vendor, renderer = random.choice(vendor_renderer_pairs)

    driver.execute_script(f"""
    Object.defineProperty(navigator, 'plugins', {{ get: () => [1,2,3] }});
    Object.defineProperty(navigator, 'languages', {{ get: () => ['en-US', 'en'] }});
    const getParameter = WebGLRenderingContext.prototype.getParameter;
    WebGLRenderingContext.prototype.getParameter = function(param) {{
        if (param === 37445) return '{vendor}';
        if (param === 37446) return '{renderer}';
        return getParameter.call(this, param);
    }};
    """)

    if stored_cookies:
        print("üü° Loading cookies...")
        driver.get("https://accounts.google.com/")
        for cookie in json.loads(stored_cookies):
            if 'sameSite' in cookie:
                del cookie['sameSite']
            try:
                driver.add_cookie(cookie)
            except:
                pass
        driver.get("https://mail.google.com/")
    else:
        print("üü¢ No cookies found. Creating new session...")
        driver.get(LOGIN_URL)
        print("‚ö†Ô∏è  Please login manually...")
        time.sleep(30)
        cookies = driver.get_cookies()
        save_session(profile_id, user_agent, cookies)

    return driver

def load_profiles(csv_path, override_proxy):
    global profiles_list
    profiles_list = []
    try:
        with open(csv_path, newline='') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                profile_id = row['profile_id'].strip()
                proxy = override_proxy if override_proxy else (row.get('proxy', '') or '').strip()
                proxy = proxy if proxy else None
                profiles_list.append((profile_id, proxy))
    except Exception as e:
        print(f"‚ùå CSV Load Error: {e}")

def run_next_profile():
    global current_driver, current_index
    if current_driver:
        try:
            current_driver.quit()
        except:
            pass
        current_driver = None
        kill_chrome()

    current_index += 1
    if current_index < len(profiles_list):
        profile_id, proxy = profiles_list[current_index]
        print(f"\nüöÄ Starting profile: {profile_id} | Proxy: {proxy or 'None'}")
        try:
            current_driver = launch_browser_return_driver(profile_id, proxy)
        except Exception as e:
            print(f"‚ùå Error launching browser for {profile_id}: {e}")
            run_next_profile()
    else:
        print("‚úÖ All profiles processed.")

def start_gui():
    def browse_file():
        path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if path:
            file_path_var.set(path)

    def run_process():
        csv_path = file_path_var.get()
        proxy_input = proxy_var.get().strip()
        api_user_id = api_user_id_var.get().strip()
        api_key_id = api_key_var.get().strip()

        if not os.path.exists(csv_path):
            messagebox.showerror("Error", "CSV file not found.")
            return

        if not api_user_id or not api_key_id:
            messagebox.showerror("Error", "API credentials are required.")
            return

        if not verify_api(api_user_id, api_key_id):
            messagebox.showerror("Access Denied", "Invalid API credentials.")
            return

        init_db()
        load_profiles(csv_path, proxy_input)
        run_next_profile()

    # Set appearance mode and default color theme
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")

    # Create the main window
    root = ctk.CTk()
    root.title("Browser Session Manager")
    root.geometry("800x700")
    root.configure(fg_color="#2b2b2b")

    # Create main frame
    main_frame = ctk.CTkFrame(root, fg_color="#2b2b2b")
    main_frame.pack(fill="both", expand=True, padx=20, pady=20)

    # Title
    title_label = ctk.CTkLabel(
        main_frame,
        text="Browser Session Manager",
        font=ctk.CTkFont(size=24, weight="bold"),
        text_color="#ffffff"
    )
    title_label.pack(pady=20)

    # API Credentials Frame
    credentials_frame = ctk.CTkFrame(main_frame, fg_color="#363636")
    credentials_frame.pack(fill="x", padx=10, pady=10)

    # API User ID
    api_user_id_var = tk.StringVar()
    ctk.CTkLabel(
        credentials_frame,
        text="API User ID:",
        font=ctk.CTkFont(size=12),
        text_color="#ffffff"
    ).pack(pady=(10, 0))
    ctk.CTkEntry(
        credentials_frame,
        textvariable=api_user_id_var,
        width=400,
        height=35,
        font=ctk.CTkFont(size=12)
    ).pack(pady=5)

    # API Key
    api_key_var = tk.StringVar()
    ctk.CTkLabel(
        credentials_frame,
        text="API Key:",
        font=ctk.CTkFont(size=12),
        text_color="#ffffff"
    ).pack(pady=(10, 0))
    ctk.CTkEntry(
        credentials_frame,
        textvariable=api_key_var,
        width=400,
        height=35,
        font=ctk.CTkFont(size=12),
        show="*"
    ).pack(pady=5)

    # File Selection Frame
    file_frame = ctk.CTkFrame(main_frame, fg_color="#363636")
    file_frame.pack(fill="x", padx=10, pady=10)

    file_path_var = tk.StringVar()
    ctk.CTkLabel(
        file_frame,
        text="Select CSV File:",
        font=ctk.CTkFont(size=12),
        text_color="#ffffff"
    ).pack(pady=(10, 0))
    
    file_entry_frame = ctk.CTkFrame(file_frame, fg_color="transparent")
    file_entry_frame.pack(fill="x", padx=10, pady=5)
    
    ctk.CTkEntry(
        file_entry_frame,
        textvariable=file_path_var,
        width=300,
        height=35,
        font=ctk.CTkFont(size=12)
    ).pack(side="left", padx=(0, 10))
    
    ctk.CTkButton(
        file_entry_frame,
        text="Browse",
        command=browse_file,
        width=100,
        height=35,
        font=ctk.CTkFont(size=12)
    ).pack(side="left")

    # Proxy Frame
    proxy_frame = ctk.CTkFrame(main_frame, fg_color="#363636")
    proxy_frame.pack(fill="x", padx=10, pady=10)

    proxy_var = tk.StringVar()
    ctk.CTkLabel(
        proxy_frame,
        text="Global Proxy (Optional):",
        font=ctk.CTkFont(size=12),
        text_color="#ffffff"
    ).pack(pady=(10, 0))
    ctk.CTkEntry(
        proxy_frame,
        textvariable=proxy_var,
        width=400,
        height=35,
        font=ctk.CTkFont(size=12)
    ).pack(pady=5)

    # Buttons Frame
    buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
    buttons_frame.pack(fill="x", padx=10, pady=10)

    ctk.CTkButton(
        buttons_frame,
        text="Start Processing",
        command=run_process,
        width=200,
        height=40,
        font=ctk.CTkFont(size=14, weight="bold"),
        fg_color="#28a745",
        hover_color="#218838"
    ).pack(side="left", padx=5)

    ctk.CTkButton(
        buttons_frame,
        text="Next Profile ‚ñ∂",
        command=run_next_profile,
        width=200,
        height=40,
        font=ctk.CTkFont(size=14, weight="bold"),
        fg_color="#007bff",
        hover_color="#0056b3"
    ).pack(side="left", padx=5)

    # Console Frame
    console_frame = ctk.CTkFrame(main_frame, fg_color="#363636")
    console_frame.pack(fill="both", expand=True, padx=10, pady=10)

    console = scrolledtext.ScrolledText(
        console_frame,
        wrap=tk.WORD,
        height=15,
        width=70,
        font=("Consolas", 10),
        bg="#1e1e1e",
        fg="#ffffff",
        insertbackground="#ffffff"
    )
    console.pack(fill="both", expand=True, padx=10, pady=10)
    sys.stdout = TextLogger(console)

    root.mainloop()

if __name__ == "__main__":
    start_gui()
